var documenterSearchIndex = {"docs":
[{"location":"formulations/","page":"Formulations","title":"Formulations","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"formulations/#Formulations","page":"Formulations","title":"Formulations","text":"","category":"section"},{"location":"formulations/","page":"Formulations","title":"Formulations","text":"AbstractMechanicsFormulation","category":"page"},{"location":"formulations/#FiniteElementContainers.AbstractMechanicsFormulation","page":"Formulations","title":"FiniteElementContainers.AbstractMechanicsFormulation","text":"abstract type AbstractMechanicsFormulation{ND}\n\n\n\n\n\n","category":"type"},{"location":"formulations/#Implementations","page":"Formulations","title":"Implementations","text":"","category":"section"},{"location":"formulations/","page":"Formulations","title":"Formulations","text":"PlaneStrain","category":"page"},{"location":"formulations/#FiniteElementContainers.PlaneStrain","page":"Formulations","title":"FiniteElementContainers.PlaneStrain","text":"struct PlaneStrain <: AbstractMechanicsFormulation{2}\n\n\n\n\n\n","category":"type"},{"location":"formulations/","page":"Formulations","title":"Formulations","text":"ThreeDimensional","category":"page"},{"location":"formulations/#FiniteElementContainers.ThreeDimensional","page":"Formulations","title":"FiniteElementContainers.ThreeDimensional","text":"struct ThreeDimensional <: AbstractMechanicsFormulation{3}\n\n\n\n\n\n","category":"type"},{"location":"formulations/#Methods","page":"Formulations","title":"Methods","text":"","category":"section"},{"location":"formulations/","page":"Formulations","title":"Formulations","text":"discrete_gradient\ndiscrete_symmetric_gradient\nextract_stiffness\nextract_stress\nmodify_field_gradients","category":"page"},{"location":"formulations/#FiniteElementContainers.discrete_gradient","page":"Formulations","title":"FiniteElementContainers.discrete_gradient","text":"discrete_gradient(_::IncompressiblePlaneStress, ∇N_X) -> Any\n\n\n\n\n\n\ndiscrete_gradient(_::PlaneStrain, ∇N_X) -> Any\n\n\n\n\n\n\ndiscrete_gradient(_::ScalarFormulation, ∇N_X) -> Any\n\n\n\n\n\n\ndiscrete_gradient(_::ThreeDimensional, ∇N_X) -> Any\n\n\n\n\n\n\ndiscrete_gradient(\n    fspace::FunctionSpace,\n    type::AbstractMechanicsFormulation,\n    X,\n    q,\n    e\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"formulations/#FiniteElementContainers.discrete_symmetric_gradient","page":"Formulations","title":"FiniteElementContainers.discrete_symmetric_gradient","text":"discrete_symmetric_gradient(\n    _::IncompressiblePlaneStress,\n    ∇N_X\n) -> Any\n\n\n\n\n\n\ndiscrete_symmetric_gradient(_::PlaneStrain, ∇N_X) -> Any\n\n\n\n\n\n\ndiscrete_symmetric_gradient(_::ScalarFormulation, ∇N_X)\n\n\n\n\n\n\ndiscrete_symmetric_gradient(\n    _::ThreeDimensional,\n    ∇N_X\n) -> Any\n\n\n\n\n\n\ndiscrete_symmetric_gradient(\n    fspace,\n    type::AbstractMechanicsFormulation,\n    X,\n    q,\n    e\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"formulations/#FiniteElementContainers.extract_stiffness","page":"Formulations","title":"FiniteElementContainers.extract_stiffness","text":"extract_stiffness(\n    _::IncompressiblePlaneStress,\n    A::Tensors.Tensor{4, 3, T<:Number, 81}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\nextract_stiffness(\n    _::PlaneStrain,\n    A::Tensors.Tensor{4, 3, T<:Number, 81}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\nextract_stiffness(\n    _::ThreeDimensional,\n    A_in::Tensors.Tensor{4, 3, T<:Number, 81}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\n","category":"function"},{"location":"formulations/#FiniteElementContainers.extract_stress","page":"Formulations","title":"FiniteElementContainers.extract_stress","text":"extract_stress(\n    _::IncompressiblePlaneStress,\n    P::Tensors.Tensor{2, 3, T<:Number, 9}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\nextract_stress(\n    _::PlaneStrain,\n    P::Tensors.Tensor{2, 3, T<:Number, 9}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\nextract_stress(\n    _::ThreeDimensional,\n    P::Tensors.Tensor{2, 3, T<:Number, 9}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\n","category":"function"},{"location":"formulations/#FiniteElementContainers.modify_field_gradients","page":"Formulations","title":"FiniteElementContainers.modify_field_gradients","text":"modify_field_gradients(\n    _::IncompressiblePlaneStress,\n    ∇u_q::StaticArraysCore.SArray{Tuple{2, 2}, T<:Number, 2, 4},\n    _::Type{<:Tensors.Tensor}\n) -> Tensors.Tensor{2, 3, _A, 9} where _A\n\n\n\n\n\n\nmodify_field_gradients(\n    _::IncompressiblePlaneStress,\n    ∇u_q::StaticArraysCore.SArray{Tuple{2, 2}, T<:Number, 2, 4},\n    _::Type{<:StaticArraysCore.SArray}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\nmodify_field_gradients(\n    _::IncompressiblePlaneStress,\n    ∇u_q::Tensors.Tensor{2, 2, T<:Number, 4},\n    _::Type{<:Tensors.Tensor}\n) -> Tensors.Tensor{2, 3, _A, 9} where _A\n\n\n\n\n\n\nmodify_field_gradients(\n    _::PlaneStrain,\n    ∇u_q::StaticArraysCore.SArray{Tuple{2, 2}, T<:Number, 2, 4},\n    _::Type{<:Tensors.Tensor}\n) -> Tensors.Tensor{2, 3, _A, 9} where _A\n\n\n\n\n\n\nmodify_field_gradients(\n    _::PlaneStrain,\n    ∇u_q::StaticArraysCore.SArray{Tuple{2, 2}, T<:Number, 2, 4},\n    _::Type{<:StaticArraysCore.SArray}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\nTo deprecate or not to deprecate?\n\nmodify_field_gradients(\n    form::PlaneStrain,\n    ∇u_q::StaticArraysCore.SArray{Tuple{2, 2}, T<:Number, 2, 4};\n    type\n) -> Tensors.Tensor{2, 3, _A, 9} where _A\n\n\n\n\n\n\nmodify_field_gradients(\n    _::PlaneStrain,\n    ∇u_q::Tensors.Tensor{2, 2, T<:Number, 4},\n    _::Type{<:Tensors.Tensor}\n) -> Tensors.Tensor{2, 3, _A, 9} where _A\n\n\n\n\n\n\nmodify_field_gradients(\n    _::ThreeDimensional,\n    ∇u_q,\n    _::Type{<:StaticArraysCore.SArray}\n) -> Any\n\n\n\n\n\n\nmodify_field_gradients(\n    _::ThreeDimensional,\n    ∇u_q,\n    _::Type{<:Tensors.Tensor}\n) -> Any\n\n\n\n\n\n\nmodify_field_gradients(form::ThreeDimensional, ∇u_q) -> Any\nmodify_field_gradients(\n    form::ThreeDimensional,\n    ∇u_q,\n    type\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"meshes/#Meshes","page":"Meshes","title":"Meshes","text":"","category":"section"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"Modules = [FiniteElementContainers]\nPages = [\n  \"Meshes.jl\"\n]\nOrder = [:type, :function]","category":"page"},{"location":"meshes/#FiniteElementContainers.AbstractMesh","page":"Meshes","title":"FiniteElementContainers.AbstractMesh","text":"abstract type AbstractMesh <: FiniteElementContainers.FEMContainer\n\n\n\n\n\n","category":"type"},{"location":"meshes/#FiniteElementContainers.FileMesh","page":"Meshes","title":"FiniteElementContainers.FileMesh","text":"struct FileMesh{MeshObj} <: FiniteElementContainers.AbstractMesh\n\nfile_name::String\nmesh_obj::Any\n\nMesh type that has a handle to an open mesh file object. This type's methods are \"overridden\" in extensions.\n\nSee FiniteElementContainersExodusExt for an example.\n\n\n\n\n\n","category":"type"},{"location":"meshes/#FiniteElementContainers.coordinates","page":"Meshes","title":"FiniteElementContainers.coordinates","text":"Dummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"function"},{"location":"meshes/#FiniteElementContainers.copy_mesh","page":"Meshes","title":"FiniteElementContainers.copy_mesh","text":"Dummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"function"},{"location":"meshes/#FiniteElementContainers.element_block_ids","page":"Meshes","title":"FiniteElementContainers.element_block_ids","text":"Dummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"function"},{"location":"meshes/#FiniteElementContainers.element_connectivity","page":"Meshes","title":"FiniteElementContainers.element_connectivity","text":"Dummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"function"},{"location":"meshes/#FiniteElementContainers.element_type","page":"Meshes","title":"FiniteElementContainers.element_type","text":"Dummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"function"},{"location":"meshes/#FiniteElementContainers.file_name-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.file_name","text":"file_name(mesh::FiniteElementContainers.AbstractMesh) -> Any\n\n\nReturns file name for an mesh type\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.nodeset","page":"Meshes","title":"FiniteElementContainers.nodeset","text":"Dummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"function"},{"location":"meshes/#FiniteElementContainers.nodeset_ids","page":"Meshes","title":"FiniteElementContainers.nodeset_ids","text":"Dummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"function"},{"location":"meshes/#FiniteElementContainers.num_dimensions","page":"Meshes","title":"FiniteElementContainers.num_dimensions","text":"Dummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"function"},{"location":"meshes/#FiniteElementContainers.num_nodes-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.num_nodes","text":"num_nodes(mesh::FiniteElementContainers.AbstractMesh)\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.sideset","page":"Meshes","title":"FiniteElementContainers.sideset","text":"Dummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"function"},{"location":"meshes/#FiniteElementContainers.sideset_ids","page":"Meshes","title":"FiniteElementContainers.sideset_ids","text":"Dummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"function"},{"location":"assemblers/","page":"Assemblers","title":"Assemblers","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"assemblers/#Assemblers","page":"Assemblers","title":"Assemblers","text":"","category":"section"},{"location":"assemblers/","page":"Assemblers","title":"Assemblers","text":"Modules = [FiniteElementContainers]\nPages = [\"assemblers/Assemblers.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"assemblers/#FiniteElementContainers.Assembler","page":"Assemblers","title":"FiniteElementContainers.Assembler","text":"abstract type Assembler{Rtype, Itype}\n\n\n\n\n\n","category":"type"},{"location":"assemblers/#FiniteElementContainers.assemble!-Tuple{NodalField, Vararg{Any, 4}}","page":"Assemblers","title":"FiniteElementContainers.assemble!","text":"assemble!(\n    global_val::NodalField,\n    fspace,\n    block_num,\n    e,\n    local_val\n)\n\n\nAssembly method for residuals\n\n\n\n\n\n","category":"method"},{"location":"assemblers/#FiniteElementContainers.assemble!-Tuple{Vector, Vararg{Any, 4}}","page":"Assemblers","title":"FiniteElementContainers.assemble!","text":"assemble!(\n    global_val::Vector,\n    fspace,\n    block_num,\n    e,\n    local_val\n)\n\n\nAssembly method for a scalar field stored as a size 1 vector\n\n\n\n\n\n","category":"method"},{"location":"assemblers/#FiniteElementContainers.assemble!-Union{Tuple{V3}, Tuple{V2}, Tuple{V1}, Tuple{V1, V1, V2, V2, V3}} where {V1<:(AbstractArray{<:Number}), V2<:(AbstractArray{<:Number}), V3<:(AbstractArray{<:Integer})}","page":"Assemblers","title":"FiniteElementContainers.assemble!","text":"assemble!(\n    R::AbstractArray{<:Number},\n    Kv::AbstractArray{<:Number},\n    R_el::AbstractArray{<:Number},\n    Kv_el::AbstractArray{<:Number},\n    conn::AbstractArray{<:Integer}\n)\n\n\ngeneric assembly method that directly goes into a vector for doing a residual and matrix vector product at once\n\n\n\n\n\n","category":"method"},{"location":"assemblers/#FiniteElementContainers.assemble!-Union{Tuple{V3}, Tuple{V2}, Tuple{V1}, Tuple{V1, V2, V3}} where {V1<:(AbstractArray{<:Number}), V2<:(AbstractArray{<:Number}), V3<:(AbstractArray{<:Integer})}","page":"Assemblers","title":"FiniteElementContainers.assemble!","text":"assemble!(\n    R::AbstractArray{<:Number},\n    R_el::AbstractArray{<:Number},\n    conn::AbstractArray{<:Integer}\n)\n\n\ngeneric assembly method that directly goes into a vector\n\n\n\n\n\n","category":"method"},{"location":"assemblers/#FiniteElementContainers.assemble_atomic!-Union{Tuple{V3}, Tuple{V2}, Tuple{V1}, Tuple{V1, V2, V3}} where {V1<:NodalField, V2<:(AbstractVector{<:Number}), V3<:(AbstractVector{<:Integer})}","page":"Assemblers","title":"FiniteElementContainers.assemble_atomic!","text":"assemble_atomic!(\n    R::NodalField,\n    R_el::AbstractVector{<:Number},\n    conn::AbstractVector{<:Integer}\n)\n\n\nassembly method for just a residual vector\n\nTODO need to add an Atomix lock here TODO add block_id to fspace or something like that\n\n\n\n\n\n","category":"method"},{"location":"assemblers/#FiniteElementContainers.float_type-Union{Tuple{Assembler{R, I}}, Tuple{I}, Tuple{R}} where {R, I}","page":"Assemblers","title":"FiniteElementContainers.float_type","text":"float_type(_::Assembler{R, I}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"assemblers/#FiniteElementContainers.int_type-Union{Tuple{Assembler{R, I}}, Tuple{I}, Tuple{R}} where {R, I}","page":"Assemblers","title":"FiniteElementContainers.int_type","text":"int_type(_::Assembler{R, I}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"assemblers/#FiniteElementContainers.update_unknown_dofs!-Union{Tuple{V}, Tuple{Union{DynamicAssembler, StaticAssembler}, Any, Any, V}} where V<:(AbstractVector{<:Integer})","page":"Assemblers","title":"FiniteElementContainers.update_unknown_dofs!","text":"update_unknown_dofs!(\n    assembler::Union{DynamicAssembler, StaticAssembler},\n    dof,\n    fspaces,\n    nodes_in::AbstractVector{<:Integer}\n)\n\n\nmethod that assumes first dof TODO move sorting of nodes up stream TODO remove other scratch unknowns and unknown_dofs arrays\n\n\n\n\n\n","category":"method"},{"location":"assemblers/","page":"Assemblers","title":"Assemblers","text":"DynamicAssembler\nStaticAssembler","category":"page"},{"location":"assemblers/#FiniteElementContainers.DynamicAssembler","page":"Assemblers","title":"FiniteElementContainers.DynamicAssembler","text":"struct DynamicAssembler{Rtype, Itype, I<:AbstractArray{Itype, 1}, J<:AbstractArray{Itype, 1}, U<:AbstractArray{Itype, 1}, Sizes<:AbstractArray{Itype, 1}, Offsets<:AbstractArray{Itype, 1}, R<:NodalField, K<:AbstractArray{Rtype, 1}, M<:AbstractArray{Rtype, 1}, C1, C2, C3, C4, C5, C6, C7} <: Assembler{Rtype, Itype}\n\nIs::AbstractVector\nJs::AbstractVector\nunknown_dofs::AbstractVector\nblock_sizes::AbstractVector\nblock_offsets::AbstractVector\nresiduals::NodalField\nstiffnesses::AbstractVector\nmasses::AbstractVector\nklasttouch::Any\ncsrrowptr::Any\ncsrcolval::Any\ncsrnzval::Any\ncsccolptr::Any\ncscrowval::Any\ncscnzval::Any\n\nAssembler for dynamic problems without damping\n\nProvides both a mass and stiffness matrix\n\n\n\n\n\n","category":"type"},{"location":"assemblers/#FiniteElementContainers.StaticAssembler","page":"Assemblers","title":"FiniteElementContainers.StaticAssembler","text":"struct StaticAssembler{Rtype, Itype, I<:AbstractArray{Itype, 1}, J<:AbstractArray{Itype, 1}, U<:AbstractArray{Itype, 1}, Sizes<:AbstractArray{Itype, 1}, Offsets<:AbstractArray{Itype, 1}, R<:NodalField, K<:AbstractArray{Rtype, 1}, C1, C2, C3, C4, C5, C6, C7} <: Assembler{Rtype, Itype}\n\nIs::AbstractVector\nJs::AbstractVector\nunknown_dofs::AbstractVector\nblock_sizes::AbstractVector\nblock_offsets::AbstractVector\nresiduals::NodalField\nstiffnesses::AbstractVector\nklasttouch::Any\ncsrrowptr::Any\ncsrcolval::Any\ncsrnzval::Any\ncsccolptr::Any\ncscrowval::Any\ncscnzval::Any\n\nAssembler for static or quasistatic problems where only a stiffness matrix is necessary\n\n\n\n\n\n","category":"type"},{"location":"assemblers/","page":"Assemblers","title":"Assemblers","text":"assemble!","category":"page"},{"location":"assemblers/#FiniteElementContainers.assemble!","page":"Assemblers","title":"FiniteElementContainers.assemble!","text":"assemble!(\n    global_val::Vector,\n    fspace,\n    block_num,\n    e,\n    local_val\n)\n\n\nAssembly method for a scalar field stored as a size 1 vector\n\n\n\n\n\nassemble!(\n    R::AbstractArray{<:Number},\n    R_el::AbstractArray{<:Number},\n    conn::AbstractArray{<:Integer}\n)\n\n\ngeneric assembly method that directly goes into a vector\n\n\n\n\n\nassemble!(\n    global_val::NodalField,\n    fspace,\n    block_num,\n    e,\n    local_val\n)\n\n\nAssembly method for residuals\n\n\n\n\n\nassemble!(\n    R::AbstractArray{<:Number},\n    Kv::AbstractArray{<:Number},\n    R_el::AbstractArray{<:Number},\n    Kv_el::AbstractArray{<:Number},\n    conn::AbstractArray{<:Integer}\n)\n\n\ngeneric assembly method that directly goes into a vector for doing a residual and matrix vector product at once\n\n\n\n\n\nassemble!(\n    assembler::DynamicAssembler,\n    K_el::AbstractMatrix{<:Number},\n    M_el::AbstractMatrix{<:Number},\n    block_id::Int64,\n    el_id::Int64\n) -> AbstractMatrix{<:Number}\n\n\nassembly for stiffness matrix\n\n\n\n\n\nassemble!(\n    assembler::DynamicAssembler,\n    dof::DofManager,\n    fspace::FunctionSpace,\n    X,\n    U,\n    block_id,\n    residual_func,\n    tangent_func,\n    mass_func\n)\n\n\nSimple method for assembling in serial\n\n\n\n\n\nassemble!(\n    assembler::DynamicAssembler,\n    dof::DofManager,\n    fspaces,\n    X,\n    U,\n    residual_func,\n    tangent_func,\n    mass_func\n)\n\n\n\n\n\n\nassembly method for matrix free assembler when functions for the element level residual and tangent_func are provided\n\n\n\n\n\nassemble!(\n    assembler::StaticAssembler,\n    K_el::AbstractMatrix,\n    block_id::Int64,\n    el_id::Int64\n) -> Any\n\n\nassembly for stiffness matrix\n\n\n\n\n\nassemble!(\n    global_val::StaticAssembler,\n    fspace,\n    block_num,\n    e,\n    local_val\n)\n\n\n\n\n\n\n","category":"function"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"CurrentModule = FiniteElementContainers\nDocTestFilters = [\n    r\"{([a-zA-Z0-9]+,\\s?)+[a-zA-Z0-9]+}\",\n    r\"(Array{[a-zA-Z0-9]+,\\s?1}|Vector{[a-zA-Z0-9]+})\",\n    r\"(Array{[a-zA-Z0-9]+,\\s?2}|Matrix{[a-zA-Z0-9]+})\",\n]","category":"page"},{"location":"dof_manager/#DofManager","page":"DofManager","title":"DofManager","text":"","category":"section"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"The DofManager is a simple lightweight struct that keeps track of which dofs are unknown or constrained.","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"DofManager","category":"page"},{"location":"dof_manager/#FiniteElementContainers.DofManager","page":"DofManager","title":"FiniteElementContainers.DofManager","text":"DofManager{A}(ND::Int, NN::Int) where A\n\n\n\n\n\nDofManager{ND, NN, I, ArrType}() where {ND, NN, I, ArrType}\n\n\n\n\n\nDofManager{ND, NN, ArrType}() where {ND, NN, ArrType}\n\n\n\n\n\nDefault constructor from a mesh\n\n\n\n\n\n","category":"type"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"A DofManager can be create as follows using a simple non-vectorized storage for fields it will create","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"julia> using FiniteElementContainers\n\njulia> dof = DofManager{2, 10, Matrix{Float64}}()\nDofManager\n  Number of nodes         = 10\n  Number of dofs per node = 2\n  Storage type            = Vector{Int64}\n","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"We can then set some nodes as boundary condition degrees of freedom. Let's pick the following nodes [1, 2] with dofs [1, 1] fixed. This works out to global dofs [1, 3]. We can then update the DofManager with a call to update_unknown_dofs! as follows.","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"julia> bc_dofs = [1, 3]\n2-element Vector{Int64}:\n 1\n 3\n\njulia> update_unknown_dofs!(dof, bc_dofs)\n","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"Now the DofManager has its dofs properly set and we can create properly sized unknown vectors. This is done with a call to create_unknowns.","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"julia> Uu = create_unknowns(dof)\n18-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"This is useful for creating zero arrays that are properly sized to the current number of total unknown degrees of freedom. ","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"We can also create properly sized NodalFields with a DofManager with a call to create_fields.","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"julia> U = create_fields(dof)\n2×10 FiniteElementContainers.SimpleNodalField{Float64, 2, 2, 10, Matrix{Float64}}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"This creates a NodalField (specifically a SimpleNodalField since we initialized the DofManager with Matrix{Float64} as the storage type) with all zero entries that is sized for the maximum number of possible unknowns, e.g. no fixed Dirichlet BCs.","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"If we look at the internal storage of U","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"julia> U.vals\n2×10 Matrix{Float64}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"we can see that SimpleNodalField is simply acting as a wrapper around Matrix{Float64} with some additional meta-data. If on the other hand we initialize the DofManager with Vector{Float64} as the internal storage type we see the following","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"julia> dof = DofManager{2, 10, Vector{Float64}}()\nDofManager\n  Number of nodes         = 10\n  Number of dofs per node = 2\n  Storage type            = Vector{Int64}\n\njulia> U = create_fields(dof)\n2×10 FiniteElementContainers.VectorizedNodalField{Float64, 2, 2, 10, Vector{Float64}}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"julia> U.vals\n20-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n ⋮\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n 0.0\n","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"As you can see this stored as a long vector of numbers rather than a matrix.","category":"page"},{"location":"connectivities/","page":"Connectivities","title":"Connectivities","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"connectivities/#Connectivities","page":"Connectivities","title":"Connectivities","text":"","category":"section"},{"location":"connectivities/","page":"Connectivities","title":"Connectivities","text":"There are a few types that are aliases of ElementFields that are related to connectivity arrays in finite elements. ","category":"page"},{"location":"connectivities/","page":"Connectivities","title":"Connectivities","text":"Connectivity\nSimpleConnectivity\nVectorizedConnectivity","category":"page"},{"location":"connectivities/#FiniteElementContainers.Connectivity","page":"Connectivities","title":"FiniteElementContainers.Connectivity","text":"abstract type ElementField{T, N, NN, NE, Vals} <: FiniteElementContainers.AbstractField{T, N, NN, Vals}\n\n\n\n\n\n","category":"type"},{"location":"connectivities/#FiniteElementContainers.SimpleConnectivity","page":"Connectivities","title":"FiniteElementContainers.SimpleConnectivity","text":"struct SimpleElementField{T, N, NN, NE, Vals} <: ElementField{T, N, NN, NE, Vals}\n\n\n\n\n\n","category":"type"},{"location":"connectivities/#FiniteElementContainers.VectorizedConnectivity","page":"Connectivities","title":"FiniteElementContainers.VectorizedConnectivity","text":"struct VectorizedElementField{T, N, NN, NE, Vals} <: ElementField{T, N, NN, NE, Vals}\n\n\n\n\n\n","category":"type"},{"location":"connectivities/","page":"Connectivities","title":"Connectivities","text":"The main method for these types is connectivity","category":"page"},{"location":"connectivities/","page":"Connectivities","title":"Connectivities","text":"connectivity","category":"page"},{"location":"connectivities/#FiniteElementContainers.connectivity","page":"Connectivities","title":"FiniteElementContainers.connectivity","text":"connectivity(\n    conn::FiniteElementContainers.SimpleElementField\n) -> Any\n\n\n\n\n\n\nconnectivity(\n    conn::FiniteElementContainers.SimpleElementField,\n    e::Int64\n) -> Any\n\n\n\n\n\n\nconnectivity(\n    conn::FiniteElementContainers.VectorizedElementField{T, N, NN, NE, Vals} where {T, N, NN, NE, Vals}\n) -> Any\n\n\n\n\n\n\nconnectivity(\n    conn::FiniteElementContainers.VectorizedElementField{T, 1, NN, NE, Vals},\n    e::Int64\n) -> Any\n\n\n\n\n\n\nconnectivity(\n    conn::FiniteElementContainers.VectorizedElementField{T, 2, NN, NE, Vals},\n    e::Int64\n) -> SubArray{T, 1} where T\n\n\n\n\n\n\nconnectivity(fspace::FunctionSpace) -> Any\n\n\n\n\n\n\nconnectivity(fspace::FunctionSpace, e::Int64) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"#FiniteElementContainers","page":"Home","title":"FiniteElementContainers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A set of containers to help in the setup of FEM codes.","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"fields/#Fields","page":"Fields","title":"Fields","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"Fields serve as loose wrappers around AbstractArray subtypes such that the size of the array is known at compile time. Although this introduces a type-instability, the idea is to do this at the top most level (mainly at setup time of a FEM simulation). By introducing this type instability, we can gain information about the field type that is used in methods downstream to construct StaticArrays of views of field types.","category":"page"},{"location":"fields/#Example-NodalField","page":"Fields","title":"Example - NodalField","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"We can set up a NodalField in one of two ways. The simplest constructor form can be used as follows","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"julia> vals = rand(2, 10)\n2×10 Matrix{Float64}:\n 0.671652  0.163963  0.538689  0.480536  0.833398  0.551275  0.790613  0.609717  0.383385  0.0387093\n 0.074336  0.963916  0.658381  0.902902  0.642238  0.617257  0.566368  0.71399   0.493144  0.153415\n\njulia> field = NodalField{2, 10, Matrix}(vals)\n2×10 FiniteElementContainers.SimpleNodalField{Float64, 2, 2, 10, Matrix{Float64}}:\n 0.671652  0.163963  0.538689  0.480536  0.833398  0.551275  0.790613  0.609717  0.383385  0.0387093\n 0.074336  0.963916  0.658381  0.902902  0.642238  0.617257  0.566368  0.71399   0.493144  0.153415\n\njulia> field.vals\n2×10 Matrix{Float64}:\n 0.671652  0.163963  0.538689  0.480536  0.833398  0.551275  0.790613  0.609717  0.383385  0.0387093\n 0.074336  0.963916  0.658381  0.902902  0.642238  0.617257  0.566368  0.71399   0.493144  0.153415\n","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"We could also store this in vectorized format as follows","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"julia> vals = rand(2, 10)\n2×10 Matrix{Float64}:\n 0.80535   0.730575  0.712725  0.474454  0.0892281  0.156759  0.0425675  0.864044  0.538667  0.377565\n 0.348685  0.852966  0.531284  0.34784   0.133556   0.483717  0.280693   0.155209  0.827217  0.532938\n\njulia> field = NodalField{2, 10, Vector}(vals)\n2×10 FiniteElementContainers.VectorizedNodalField{Float64, 2, 2, 10, Vector{Float64}}:\n 0.80535   0.730575  0.712725  0.474454  0.0892281  0.156759  0.0425675  0.864044  0.538667  0.377565\n 0.348685  0.852966  0.531284  0.34784   0.133556   0.483717  0.280693   0.155209  0.827217  0.532938\n\njulia> field.vals\n20-element Vector{Float64}:\n 0.805349766666621\n 0.34868545083892455\n 0.7305749598014636\n 0.8529660539980414\n 0.7127252744440836\n 0.5312840325763362\n 0.47445360786490387\n 0.34784023927079855\n 0.08922808334086696\n ⋮\n 0.04256750367757933\n 0.28069295436131725\n 0.864043693939776\n 0.15520937344242647\n 0.5386666785752343\n 0.8272174353577112\n 0.3775645360156227\n 0.532938439960596\n","category":"page"},{"location":"fields/#Implementation","page":"Fields","title":"Implementation","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"The base type for fields is the AbstractField abstract type. ","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"AbstractField","category":"page"},{"location":"fields/#FiniteElementContainers.AbstractField","page":"Fields","title":"FiniteElementContainers.AbstractField","text":"abstract type AbstractField{T, N, NF, Vals} <: AbstractArray{T, N}\n\nThin wrapper that subtypes AbstractArray and serves as the base Field type\n\n\n\n\n\n","category":"type"},{"location":"fields/","page":"Fields","title":"Fields","text":"Any new field added to FiniteElementContainers should be a subtype of this type.","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"The existing direct subtypes of AbstractField are the following","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"ElementField\nNodalField\nQuadratureField","category":"page"},{"location":"fields/#FiniteElementContainers.ElementField","page":"Fields","title":"FiniteElementContainers.ElementField","text":"abstract type ElementField{T, N, NN, NE, Vals} <: FiniteElementContainers.AbstractField{T, N, NN, Vals}\n\nAbstract type for implementations of fields that live on elements.\n\nConstructors\n\nElementField{NN, NE, Vector}(vals::M)                    where {NN, NE, M <: AbstractArray{<:Number, 2}}\n\nElementField{NN, NE, Matrix}(vals::M)                    where {NN, NE, M <: AbstractArray{<:Number, 2}}\n\nElementField{NN, NE, Vector}(vals::V)                    where {NN, NE, V <: AbstractArray{<:Number, 1}}\n\nElementField{NN, NE, Vector, T}(::UndefInitializer)      where {NN, NE, T}\n\nElementField{NN, NE, Matrix, T}(::UndefInitializer)      where {NN, NE, T <: Number}\n\nElementField{NN, NE, StructArray, T}(::UndefInitializer) where {NN, NE, T}\n\nElementField{Tup, A, T}(::UndefInitializer)              where {Tup, A, T}\n\nElementField{Tup, A}(vals::M)                            where {Tup, A, M <: AbstractArray}\n\n\n\n\n\n","category":"type"},{"location":"fields/#FiniteElementContainers.NodalField","page":"Fields","title":"FiniteElementContainers.NodalField","text":"abstract type NodalField{T, N, NF, NN, Vals} <: FiniteElementContainers.AbstractField{T, N, NF, Vals}\n\nAbstract type for implementations of fields that live on nodes.\n\nConstructors\n\nNodalField{NF, NN, Vector}(vals::M)                    where {NF, NN, M <: AbstractArray{<:Number, 2}}\n\nNodalField{NF, NN, Matrix}(vals::M)                    where {NF, NN, M <: AbstractArray{<:Number, 2}}\n\nNodalField{NF, NN, Vector}(vals::V)                    where {NF, NN, V <: AbstractArray{<:Number, 1}}\n\nNodalField{NF, NN, Vector}(vals::V)                    where {NF, NN, V <: AbstractArray{<:Number, 1}}\n\nNodalField{NF, NN, Vector, T}(::UndefInitializer)      where {NF, NN, T}\n\nNodalField{NF, NN, Matrix, T}(::UndefInitializer)      where {NF, NN, T <: Number}\n\nNodalField{NF, NN, StructArray, T}(::UndefInitializer) where {NF, NN, T}\n\nNodalField{Tup, A, T}(::UndefInitializer)              where {Tup, A, T}\n\n\n\n\n\n","category":"type"},{"location":"fields/#FiniteElementContainers.QuadratureField","page":"Fields","title":"FiniteElementContainers.QuadratureField","text":"abstract type QuadratureField{T, N, NF, NQ, NE, Vals} <: FiniteElementContainers.AbstractField{T, N, NF, Vals}\n\nAbstract type for implementations of fields that live on quadrature points.\n\nConstructors\n\nQuadratureField{NF, NQ, NE, Matrix}(vals::Matrix{<:Number})      where {NF, NQ, NE}\n\nQuadratureField{NF, NQ, NE, Vector}(vals::Matrix{<:Number})      where {NF, NQ, NE}\n\nQuadratureField{NF, NQ, NE, Matrix, T}(::UndefInitializer)       where {NF, NQ, NE, T}\n\nQuadratureField{NF, NQ, NE, StructArray, T}(::UndefInitializer)  where {NF, NQ, NE, T}\n\nQuadratureField{NF, NQ, NE, StructVector, T}(::UndefInitializer) where {NF, NQ, NE, T}\n\nQuadratureField{NF, NQ, NE, Vector, T}(::UndefInitializer)       where {NF, NQ, NE, T}\n\nQuadratureField{Tup, A, T}(::UndefInitializer)                   where {Tup, A, T}\n\nQuadratureField{Tup, A}(vals::M)                                 where {Tup, A, M <: AbstractArray}\n\n\n\n\n\n","category":"type"},{"location":"fields/#Types","page":"Fields","title":"Types","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"There's several different implementations currently for different field types.","category":"page"},{"location":"fields/#Methods-on-AbstractField","page":"Fields","title":"Methods on AbstractField","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"Modules = [FiniteElementContainers]\nPages = [\"fields/Fields.jl\"]\nOrder = [:function]","category":"page"},{"location":"fields/#Base.eltype-Union{Tuple{Type{FiniteElementContainers.AbstractField{T, N, NF, Vals}}}, Tuple{Vals}, Tuple{NF}, Tuple{N}, Tuple{T}} where {T, N, NF, Vals}","page":"Fields","title":"Base.eltype","text":"eltype(\n    _::Type{FiniteElementContainers.AbstractField{T, N, NF, Vals}}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.num_elements-Union{Tuple{ElementField{T, N, NN, NE, Vals}}, Tuple{Vals}, Tuple{NE}, Tuple{NN}, Tuple{N}, Tuple{T}} where {T, N, NN, NE, Vals}","page":"Fields","title":"FiniteElementContainers.num_elements","text":"num_elements(_::ElementField{T, N, NN, NE, Vals}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.num_elements-Union{Tuple{QuadratureField{T, N, NF, NQ, NE, Vals}}, Tuple{Vals}, Tuple{NE}, Tuple{NQ}, Tuple{NF}, Tuple{N}, Tuple{T}} where {T, N, NF, NQ, NE, Vals}","page":"Fields","title":"FiniteElementContainers.num_elements","text":"num_elements(\n    _::QuadratureField{T, N, NF, NQ, NE, Vals}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.num_fields-Union{Tuple{FiniteElementContainers.AbstractField{T, N, NF, Vals}}, Tuple{Vals}, Tuple{NF}, Tuple{N}, Tuple{T}} where {T, N, NF, Vals}","page":"Fields","title":"FiniteElementContainers.num_fields","text":"num_fields(\n    _::FiniteElementContainers.AbstractField{T, N, NF, Vals}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.num_nodes-Union{Tuple{NodalField{T, N, NF, NN, Vals}}, Tuple{Vals}, Tuple{NN}, Tuple{NF}, Tuple{N}, Tuple{T}} where {T, N, NF, NN, Vals}","page":"Fields","title":"FiniteElementContainers.num_nodes","text":"num_nodes(_::NodalField{T, N, NF, NN, Vals}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.num_nodes_per_element-Tuple{ElementField}","page":"Fields","title":"FiniteElementContainers.num_nodes_per_element","text":"num_nodes_per_element(field::ElementField) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.num_q_points-Union{Tuple{QuadratureField{T, N, NF, NQ, NE, Vals}}, Tuple{Vals}, Tuple{NE}, Tuple{NQ}, Tuple{NF}, Tuple{N}, Tuple{T}} where {T, N, NF, NQ, NE, Vals}","page":"Fields","title":"FiniteElementContainers.num_q_points","text":"num_q_points(\n    _::QuadratureField{T, N, NF, NQ, NE, Vals}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#Internal-constructors-for-ElementFields","page":"Fields","title":"Internal constructors for ElementFields","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"Modules = [FiniteElementContainers]\nPages = [\"fields/SimpleElementField.jl\", \"fields/VectorizedElementField.jl\"]\nOrder = [:type]","category":"page"},{"location":"fields/#FiniteElementContainers.SimpleElementField","page":"Fields","title":"FiniteElementContainers.SimpleElementField","text":"struct SimpleElementField{T, N, NN, NE, Vals} <: ElementField{T, N, NN, NE, Vals}\n\n\n\n\n\n","category":"type"},{"location":"fields/#FiniteElementContainers.SimpleElementField-Union{Tuple{M}, Tuple{NE}, Tuple{NN}} where {NN, NE, M<:(AbstractMatrix{<:Number})}","page":"Fields","title":"FiniteElementContainers.SimpleElementField","text":"SimpleElementField{NN, NE}(vals::M) where {NN, NE, M <: AbstractArray{<:Number, 2}}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.SimpleElementField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NE}, Tuple{NN}} where {NN, NE, T}","page":"Fields","title":"FiniteElementContainers.SimpleElementField","text":"SimpleElementField{NN, NE, Matrix, T}(::UndefInitializer) where {NN, NE, T}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedElementField","page":"Fields","title":"FiniteElementContainers.VectorizedElementField","text":"struct VectorizedElementField{T, N, NN, NE, Vals<:AbstractArray{T, 1}} <: ElementField{T, N, NN, NE, Vals<:AbstractArray{T, 1}}\n\n\n\n\n\n","category":"type"},{"location":"fields/#FiniteElementContainers.VectorizedElementField-Union{Tuple{Matrix{<:Number}}, Tuple{NE}, Tuple{NN}} where {NN, NE}","page":"Fields","title":"FiniteElementContainers.VectorizedElementField","text":"VectorizedElementField{NN, NE}(vals::Matrix{<:Number}) where {NN, NE}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedElementField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NE}, Tuple{NN}} where {NN, NE, T<:AbstractArray}","page":"Fields","title":"FiniteElementContainers.VectorizedElementField","text":"VectorizedElementField{NN, NE, T}(::UndefInitializer) where {NN, NE, T <: AbstractArray}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedElementField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NE}, Tuple{NN}} where {NN, NE, T<:Number}","page":"Fields","title":"FiniteElementContainers.VectorizedElementField","text":"VectorizedElementField{NN, NE, T}(::UndefInitializer) where {NN, NE, T <: Number}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedElementField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NE}, Tuple{NN}} where {NN, NE, T}","page":"Fields","title":"FiniteElementContainers.VectorizedElementField","text":"VectorizedElementField{NN, NE, StructArray, T}(::UndefInitializer) where {NN, NE, T}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedElementField-Union{Tuple{V}, Tuple{NE}, Tuple{NN}} where {NN, NE, V<:(AbstractVector{<:AbstractArray})}","page":"Fields","title":"FiniteElementContainers.VectorizedElementField","text":"VectorizedElementField{NN, NE}(vals::V) where {NN, NE, V <: AbstractArray{<:AbstractArray, 1}}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedElementField-Union{Tuple{V}, Tuple{NE}, Tuple{NN}} where {NN, NE, V<:(AbstractVector{<:Number})}","page":"Fields","title":"FiniteElementContainers.VectorizedElementField","text":"VectorizedElementField{NN, NE}(vals::V) where {NN, NE, V <: AbstractArray{<:Number, 1}}\n\n\n\n\n\n","category":"method"},{"location":"fields/#Internal-constructors-for-NodalFields","page":"Fields","title":"Internal constructors for NodalFields","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"Modules = [FiniteElementContainers]\nPages = [\"fields/SimpleNodalField.jl\", \"fields/VectorizedNodalField.jl\"]\nOrder = [:type]","category":"page"},{"location":"fields/#FiniteElementContainers.SimpleNodalField","page":"Fields","title":"FiniteElementContainers.SimpleNodalField","text":"struct SimpleNodalField{T, N, NF, NN, Vals<:AbstractArray{T, 2}} <: NodalField{T, N, NF, NN, Vals<:AbstractArray{T, 2}}\n\n\n\n\n\n","category":"type"},{"location":"fields/#FiniteElementContainers.SimpleNodalField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NN}, Tuple{NF}} where {NF, NN, T}","page":"Fields","title":"FiniteElementContainers.SimpleNodalField","text":"SimpleNodalField{NF, NN, T}(::UndefInitializer) where {NF, NN, T}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.SimpleNodalField-Union{Tuple{V}, Tuple{NN}, Tuple{NF}} where {NF, NN, V<:(AbstractMatrix{<:Number})}","page":"Fields","title":"FiniteElementContainers.SimpleNodalField","text":"SimpleNodalField{NF, NN}(vals::V) where {NF, NN, V <: AbstractArray{<:Number, 2}}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedNodalField","page":"Fields","title":"FiniteElementContainers.VectorizedNodalField","text":"struct VectorizedNodalField{T, N, NF, NN, Vals<:AbstractArray{T, 1}} <: NodalField{T, N, NF, NN, Vals<:AbstractArray{T, 1}}\n\n\n\n\n\n","category":"type"},{"location":"fields/#FiniteElementContainers.VectorizedNodalField-Union{Tuple{M}, Tuple{NN}, Tuple{NF}} where {NF, NN, M<:(AbstractMatrix{<:Number})}","page":"Fields","title":"FiniteElementContainers.VectorizedNodalField","text":"VectorizedNodalField{NF, NN}(vals::M) where {NF, NN, M <: AbstractArray{<:Number, 2}}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedNodalField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NN}, Tuple{NF}} where {NF, NN, T<:AbstractArray}","page":"Fields","title":"FiniteElementContainers.VectorizedNodalField","text":"VectorizedNodalField{NF, NN, T}(::UndefInitializer) where {NF, NN, T <: AbstractArray}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedNodalField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NN}, Tuple{NF}} where {NF, NN, T<:Number}","page":"Fields","title":"FiniteElementContainers.VectorizedNodalField","text":"VectorizedNodalField{NF, NN, T}(::UndefInitializer) where {NF, NN, T <: Number}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedNodalField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NN}, Tuple{NF}} where {NF, NN, T}","page":"Fields","title":"FiniteElementContainers.VectorizedNodalField","text":"VectorizedNodalField{NF, NN, StructArray, T}(::UndefInitializer) where {NF, NN, T}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedNodalField-Union{Tuple{V}, Tuple{NN}, Tuple{NF}} where {NF, NN, V<:(AbstractVector{<:AbstractArray})}","page":"Fields","title":"FiniteElementContainers.VectorizedNodalField","text":"VectorizedNodalField{NF, NN}(vals::V) where {NF, NN, V <: AbstractArray{<:AbstractArray, 1}}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedNodalField-Union{Tuple{V}, Tuple{NN}, Tuple{NF}} where {NF, NN, V<:(AbstractVector{<:Number})}","page":"Fields","title":"FiniteElementContainers.VectorizedNodalField","text":"VectorizedNodalField{NF, NN}(vals::V) where {NF, NN, V <: AbstractArray{<:Number, 1}}\n\n\n\n\n\n","category":"method"},{"location":"fields/#Internal-constructors-for-QuadratureFields","page":"Fields","title":"Internal constructors for QuadratureFields","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"Modules = [FiniteElementContainers]\nPages = [\"fields/SimpleQuadratureField.jl\", \"fields/VectorizedQuadratureField.jl\"]\nOrder = [:type]","category":"page"},{"location":"fields/#FiniteElementContainers.SimpleQuadratureField","page":"Fields","title":"FiniteElementContainers.SimpleQuadratureField","text":"struct SimpleQuadratureField{T, N, NF, NQ, NE, Vals<:AbstractArray{T, 2}} <: QuadratureField{T, N, NF, NQ, NE, Vals<:AbstractArray{T, 2}}\n\n\n\n\n\n","category":"type"},{"location":"fields/#FiniteElementContainers.SimpleQuadratureField-Union{Tuple{M}, Tuple{NE}, Tuple{NQ}} where {NQ, NE, M<:(AbstractMatrix{<:Number})}","page":"Fields","title":"FiniteElementContainers.SimpleQuadratureField","text":"SimpleQuadratureField{1, NQ, NE}(vals::M) where {NQ, NE, M <: AbstractArray{<:Number, 2}}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.SimpleQuadratureField-Union{Tuple{S}, Tuple{NE}, Tuple{NQ}, Tuple{NF}} where {NF, NQ, NE, S<:StructArrays.StructArray}","page":"Fields","title":"FiniteElementContainers.SimpleQuadratureField","text":"SimpleQuadratureField{NF, NQ, NE}(vals::S) where {NF, NQ, NE, S <: StructArray}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.SimpleQuadratureField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NE}, Tuple{NQ}, Tuple{NF}} where {NF, NQ, NE, T}","page":"Fields","title":"FiniteElementContainers.SimpleQuadratureField","text":"SimpleQuadratureField{NF, NQ, NE, StructArray, T}(::UndefInitializer) where {NF, NQ, NE, T}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.SimpleQuadratureField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NE}, Tuple{NQ}} where {NQ, NE, T<:AbstractArray}","page":"Fields","title":"FiniteElementContainers.SimpleQuadratureField","text":"SimpleQuadratureField{1, NQ, NE, Matrix, T}(::UndefInitializer) where {NQ, NE, T <: AbstractArray}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.SimpleQuadratureField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NE}, Tuple{NQ}} where {NQ, NE, T<:Number}","page":"Fields","title":"FiniteElementContainers.SimpleQuadratureField","text":"SimpleQuadratureField{1, NQ, NE, Matrix, T}(::UndefInitializer) where {NQ, NE, T <: Number}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedQuadratureField","page":"Fields","title":"FiniteElementContainers.VectorizedQuadratureField","text":"struct VectorizedQuadratureField{T, N, NF, NQ, NE, Vals<:AbstractArray{T, 1}} <: QuadratureField{T, N, NF, NQ, NE, Vals<:AbstractArray{T, 1}}\n\n\n\n\n\n","category":"type"},{"location":"fields/#FiniteElementContainers.VectorizedQuadratureField-Union{Tuple{M}, Tuple{NE}, Tuple{NQ}} where {NQ, NE, M<:(AbstractMatrix{<:Number})}","page":"Fields","title":"FiniteElementContainers.VectorizedQuadratureField","text":"VectorizedQuadratureField{1, NQ, NE}(vals::M) where {NQ, NE, M <: AbstractArray{<:Number, 2}}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedQuadratureField-Union{Tuple{S}, Tuple{NE}, Tuple{NQ}, Tuple{NF}} where {NF, NQ, NE, S<:(StructArrays.StructVector)}","page":"Fields","title":"FiniteElementContainers.VectorizedQuadratureField","text":"VectorizedQuadratureField{NF, NQ, NE}(vals::S) where {NF, NQ, NE, S <: StructVector}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedQuadratureField-Union{Tuple{UndefInitializer}, Tuple{T}, Tuple{NE}, Tuple{NQ}, Tuple{NF}} where {NF, NQ, NE, T}","page":"Fields","title":"FiniteElementContainers.VectorizedQuadratureField","text":"VectorizedQuadratureField{NF, NQ, NE, Vector, T}(::UndefInitializer) where {NF, NQ, NE, T}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.VectorizedQuadratureField-Union{Tuple{V}, Tuple{NE}, Tuple{NQ}} where {NQ, NE, V<:(AbstractVector{<:Number})}","page":"Fields","title":"FiniteElementContainers.VectorizedQuadratureField","text":"VectorizedQuadratureField{1, NQ, NE}(vals::V) where {NQ, NE, V <: AbstractArray{<:Number, 1}}\n\n\n\n\n\n","category":"method"},{"location":"function_spaces/","page":"Function spaces","title":"Function spaces","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"function_spaces/#Function-spaces","page":"Function spaces","title":"Function spaces","text":"","category":"section"},{"location":"function_spaces/","page":"Function spaces","title":"Function spaces","text":"FunctionSpace","category":"page"},{"location":"function_spaces/#FiniteElementContainers.FunctionSpace","page":"Function spaces","title":"FiniteElementContainers.FunctionSpace","text":"abstract type FunctionSpace{NDof, RefFE, Conn}\n\n\n\n\n\n","category":"type"},{"location":"function_spaces/#Implementations","page":"Function spaces","title":"Implementations","text":"","category":"section"},{"location":"function_spaces/","page":"Function spaces","title":"Function spaces","text":"Modules = [FiniteElementContainers]\nPages = [\"./function_spaces/NonAllocatedFunctionSpace.jl\"]\nOrder = [:type, :function, :constant, :macro]","category":"page"},{"location":"function_spaces/#FiniteElementContainers.NonAllocatedFunctionSpace","page":"Function spaces","title":"FiniteElementContainers.NonAllocatedFunctionSpace","text":"struct NonAllocatedFunctionSpace{NDof, Map, Conn<:(ElementField), DofConn<:(ElementField), RefFE<:ReferenceFiniteElements.ReferenceFE} <: FunctionSpace{NDof, Conn<:(ElementField), RefFE<:ReferenceFiniteElements.ReferenceFE}\n\nelem_id_map::Any\nconn::ElementField\ndof_conn::ElementField\nref_fe::ReferenceFiniteElements.ReferenceFE\n\n\n\n\n\n","category":"type"},{"location":"function_spaces/","page":"Function spaces","title":"Function spaces","text":"Modules = [FiniteElementContainers]\nPages = [\"./function_spaces/VectorizedPreAllocatedFunctionSpace.jl\"]\nOrder = [:type, :function, :constant, :macro]","category":"page"},{"location":"function_spaces/#FiniteElementContainers.VectorizedPreAllocatedFunctionSpace","page":"Function spaces","title":"FiniteElementContainers.VectorizedPreAllocatedFunctionSpace","text":"struct VectorizedPreAllocatedFunctionSpace{NDof, Map, Conn<:(ElementField), DofConn<:(ElementField), RefFE<:ReferenceFiniteElements.ReferenceFE, V1<:QuadratureField, V2<:QuadratureField, V3<:QuadratureField} <: FunctionSpace{NDof, Conn<:(ElementField), RefFE<:ReferenceFiniteElements.ReferenceFE}\n\nelem_id_map::Any\nconn::ElementField\ndof_conn::ElementField\nref_fe::ReferenceFiniteElements.ReferenceFE\nNs::QuadratureField\n∇N_Xs::QuadratureField\nJxWs::QuadratureField\n\n\n\n\n\n","category":"type"},{"location":"function_spaces/#Useful-methods","page":"Function spaces","title":"Useful methods","text":"","category":"section"},{"location":"function_spaces/","page":"Function spaces","title":"Function spaces","text":"dof_connectivity\nelement_level_fields\nelement_level_fields_reinterpret\nreference_element\nquadrature_level_field_values\nquadrature_level_field_gradients\nvolume","category":"page"},{"location":"function_spaces/#FiniteElementContainers.dof_connectivity","page":"Function spaces","title":"FiniteElementContainers.dof_connectivity","text":"dof_connectivity(fspace::FunctionSpace) -> Any\n\n\n\n\n\n\ndof_connectivity(fspace::FunctionSpace, e::Int64) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"function_spaces/#FiniteElementContainers.element_level_fields","page":"Function spaces","title":"FiniteElementContainers.element_level_fields","text":"element_level_fields(\n    fspace::FunctionSpace,\n    u::NodalField\n) -> Any\n\n\n\n\n\n\nelement_level_fields(\n    fspace::FunctionSpace,\n    u,\n    e::Int64\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"function_spaces/#FiniteElementContainers.element_level_fields_reinterpret","page":"Function spaces","title":"FiniteElementContainers.element_level_fields_reinterpret","text":"element_level_fields_reinterpret(\n    fspace::FunctionSpace,\n    u::NodalField\n) -> Any\n\n\n\n\n\n\nelement_level_fields_reinterpret(\n    fspace::FunctionSpace,\n    u::NodalField,\n    e::Int64\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"function_spaces/#FiniteElementContainers.reference_element","page":"Function spaces","title":"FiniteElementContainers.reference_element","text":"reference_element(fspace::FunctionSpace) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"function_spaces/#FiniteElementContainers.quadrature_level_field_values","page":"Function spaces","title":"FiniteElementContainers.quadrature_level_field_values","text":"quadrature_level_field_values(\n    fspace::FunctionSpace,\n    _::NodalField,\n    u::NodalField,\n    q::Int64,\n    e::Int64\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"function_spaces/#FiniteElementContainers.quadrature_level_field_gradients","page":"Function spaces","title":"FiniteElementContainers.quadrature_level_field_gradients","text":"quadrature_level_field_gradients(\n    fspace::FunctionSpace,\n    X::NodalField,\n    u::NodalField,\n    q::Int64,\n    e::Int64\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"function_spaces/#FiniteElementContainers.volume","page":"Function spaces","title":"FiniteElementContainers.volume","text":"volume(\n    fspace::FunctionSpace,\n    _::ReferenceFiniteElements.AbstractElementType,\n    X::NodalField,\n    q::Int64,\n    e::Int64\n) -> Any\n\n\n\n\n\n\nvolume(\n    fspace::FunctionSpace,\n    X::NodalField,\n    e::Int64\n) -> Any\n\n\n\n\n\n\nvolume(fspace::FunctionSpace, X::NodalField) -> Any\n\n\n\n\n\n\n","category":"function"}]
}
