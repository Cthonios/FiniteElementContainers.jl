var documenterSearchIndex = {"docs":
[{"location":"formulations/","page":"Formulations","title":"Formulations","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"formulations/#Formulations","page":"Formulations","title":"Formulations","text":"","category":"section"},{"location":"formulations/","page":"Formulations","title":"Formulations","text":"AbstractMechanicsFormulation","category":"page"},{"location":"formulations/#FiniteElementContainers.AbstractMechanicsFormulation","page":"Formulations","title":"FiniteElementContainers.AbstractMechanicsFormulation","text":"abstract type AbstractMechanicsFormulation{ND}\n\n\n\n\n\n","category":"type"},{"location":"formulations/#Implementations","page":"Formulations","title":"Implementations","text":"","category":"section"},{"location":"formulations/","page":"Formulations","title":"Formulations","text":"PlaneStrain","category":"page"},{"location":"formulations/#FiniteElementContainers.PlaneStrain","page":"Formulations","title":"FiniteElementContainers.PlaneStrain","text":"struct PlaneStrain <: AbstractMechanicsFormulation{2}\n\n\n\n\n\n","category":"type"},{"location":"formulations/","page":"Formulations","title":"Formulations","text":"ThreeDimensional","category":"page"},{"location":"formulations/#FiniteElementContainers.ThreeDimensional","page":"Formulations","title":"FiniteElementContainers.ThreeDimensional","text":"struct ThreeDimensional <: AbstractMechanicsFormulation{3}\n\n\n\n\n\n","category":"type"},{"location":"formulations/#Methods","page":"Formulations","title":"Methods","text":"","category":"section"},{"location":"formulations/","page":"Formulations","title":"Formulations","text":"discrete_gradient\ndiscrete_symmetric_gradient\nextract_stiffness\nextract_stress\nmodify_field_gradients","category":"page"},{"location":"formulations/#FiniteElementContainers.discrete_gradient","page":"Formulations","title":"FiniteElementContainers.discrete_gradient","text":"discrete_gradient(_::IncompressiblePlaneStress, ∇N_X) -> Any\n\n\n\n\n\n\ndiscrete_gradient(_::PlaneStrain, ∇N_X) -> Any\n\n\n\n\n\n\ndiscrete_gradient(_::ScalarFormulation, ∇N_X) -> Any\n\n\n\n\n\n\ndiscrete_gradient(_::ThreeDimensional, ∇N_X) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"formulations/#FiniteElementContainers.discrete_symmetric_gradient","page":"Formulations","title":"FiniteElementContainers.discrete_symmetric_gradient","text":"discrete_symmetric_gradient(\n    _::IncompressiblePlaneStress,\n    ∇N_X\n) -> Any\n\n\n\n\n\n\ndiscrete_symmetric_gradient(_::PlaneStrain, ∇N_X) -> Any\n\n\n\n\n\n\ndiscrete_symmetric_gradient(_::ScalarFormulation, ∇N_X)\n\n\n\n\n\n\ndiscrete_symmetric_gradient(\n    _::ThreeDimensional,\n    ∇N_X\n) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"formulations/#FiniteElementContainers.extract_stiffness","page":"Formulations","title":"FiniteElementContainers.extract_stiffness","text":"extract_stiffness(\n    _::IncompressiblePlaneStress,\n    A::Tensors.Tensor{4, 3, T<:Number, 81}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\nextract_stiffness(\n    _::PlaneStrain,\n    A::Tensors.Tensor{4, 3, T<:Number, 81}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\nextract_stiffness(\n    _::ThreeDimensional,\n    A_in::Tensors.Tensor{4, 3, T<:Number, 81}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\n","category":"function"},{"location":"formulations/#FiniteElementContainers.extract_stress","page":"Formulations","title":"FiniteElementContainers.extract_stress","text":"extract_stress(\n    _::IncompressiblePlaneStress,\n    P::Tensors.Tensor{2, 3, T<:Number, 9}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\nextract_stress(\n    _::PlaneStrain,\n    P::Tensors.Tensor{2, 3, T<:Number, 9}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\nextract_stress(\n    _::ThreeDimensional,\n    P::Tensors.Tensor{2, 3, T<:Number, 9}\n) -> StaticArraysCore.SArray\n\n\n\n\n\n\n","category":"function"},{"location":"formulations/#FiniteElementContainers.modify_field_gradients","page":"Formulations","title":"FiniteElementContainers.modify_field_gradients","text":"modify_field_gradients(\n    _::IncompressiblePlaneStress,\n    ∇u_q::StaticArraysCore.SArray{Tuple{2, 2}, T<:Number, 2, 4}\n) -> Tensors.Tensor{2, 3, _A, 9} where _A\n\n\n\n\n\n\nmodify_field_gradients(\n    _::PlaneStrain,\n    ∇u_q::StaticArraysCore.SArray{Tuple{2, 2}, T<:Number, 2, 4}\n) -> Tensors.Tensor{2, 3, _A, 9} where _A\n\n\n\n\n\n\nmodify_field_gradients(\n    _::ThreeDimensional,\n    ∇u_q::StaticArraysCore.SArray{Tuple{3, 3}, T<:Number, 2, 9}\n) -> Tensors.Tensor{2, 3, _A, 9} where _A\n\n\n\n\n\n\n","category":"function"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"meshes/#Meshes","page":"Meshes","title":"Meshes","text":"","category":"section"},{"location":"meshes/","page":"Meshes","title":"Meshes","text":"Modules = [FiniteElementContainers]\nPages = [\"Meshes.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"meshes/#FiniteElementContainers.AbstractMesh","page":"Meshes","title":"FiniteElementContainers.AbstractMesh","text":"abstract type AbstractMesh <: FiniteElementContainers.FEMContainer\n\n\n\n\n\n","category":"type"},{"location":"meshes/#FiniteElementContainers.FileMesh","page":"Meshes","title":"FiniteElementContainers.FileMesh","text":"struct FileMesh{MeshObj} <: FiniteElementContainers.AbstractMesh\n\nfile_name::String\nmesh_obj::Any\n\nMesh type that has a handle to an open mesh file object. This type's methods are \"overridden\" in extensions.\n\nSee FiniteElementContainersExodusExt for an example.\n\n\n\n\n\n","category":"type"},{"location":"meshes/#FiniteElementContainers.UnstructuredMesh","page":"Meshes","title":"FiniteElementContainers.UnstructuredMesh","text":"struct UnstructuredMesh{MeshObj, X, EBlockNames, ETypes, EConns, EMaps, NSetNodes, SSetElems, SSetNodes, SSetSides, EdgeConns, FaceConns} <: FiniteElementContainers.AbstractMesh\n\nmesh_obj::Any\nnodal_coords::Any\nelement_block_names::Any\nelement_types::Any\nelement_conns::Any\nelement_id_maps::Any\nnodeset_nodes::Any\nsideset_elems::Any\nsideset_nodes::Any\nsideset_sides::Any\nedge_conns::Any\nface_conns::Any\n\n\n\n\n\n","category":"type"},{"location":"meshes/#FiniteElementContainers.UnstructuredMesh-Tuple{Any, String, Bool, Bool}","page":"Meshes","title":"FiniteElementContainers.UnstructuredMesh","text":"UnstructuredMesh(\n    file_type,\n    file_name::String,\n    create_edges::Bool,\n    create_faces::Bool\n) -> UnstructuredMesh{MeshObj, X, EBlockNames, ETypes, EConns, EMaps, NSetNodes, SSetElems, SSetNodes, SSetSides, EdgeConns, Nothing} where {MeshObj, X, EBlockNames, ETypes, EConns, EMaps, NSetNodes, SSetElems, SSetNodes, SSetSides, EdgeConns}\n\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.UnstructuredMesh-Tuple{String}","page":"Meshes","title":"FiniteElementContainers.UnstructuredMesh","text":"UnstructuredMesh(\n    file_name::String;\n    create_edges,\n    create_faces\n) -> UnstructuredMesh{MeshObj, X, EBlockNames, ETypes, EConns, EMaps, NSetNodes, SSetElems, SSetNodes, SSetSides, EdgeConns, Nothing} where {MeshObj, X, EBlockNames, ETypes, EConns, EMaps, NSetNodes, SSetElems, SSetNodes, SSetSides, EdgeConns}\n\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.coordinates-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.coordinates","text":"coordinates(\n    _::FiniteElementContainers.AbstractMesh\n) -> Matrix\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.copy_mesh","page":"Meshes","title":"FiniteElementContainers.copy_mesh","text":"Dummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"function"},{"location":"meshes/#FiniteElementContainers.element_block_id_map-Tuple{FiniteElementContainers.AbstractMesh, Any}","page":"Meshes","title":"FiniteElementContainers.element_block_id_map","text":"element_block_id_map(\n    _::FiniteElementContainers.AbstractMesh,\n    id\n) -> Any\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.element_block_ids-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.element_block_ids","text":"element_block_ids(\n    _::FiniteElementContainers.AbstractMesh\n) -> Any\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.element_block_names-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.element_block_names","text":"element_block_names(\n    _::FiniteElementContainers.AbstractMesh\n) -> Any\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.element_connectivity-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.element_connectivity","text":"element_connectivity(\n    _::FiniteElementContainers.AbstractMesh\n)\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.element_type-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.element_type","text":"element_type(_::FiniteElementContainers.AbstractMesh)\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.file_name-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.file_name","text":"file_name(mesh::FiniteElementContainers.AbstractMesh) -> Any\n\n\nReturns file name for an mesh type\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.nodeset-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.nodeset","text":"nodeset(_::FiniteElementContainers.AbstractMesh)\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.nodeset_ids-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.nodeset_ids","text":"nodeset_ids(_::FiniteElementContainers.AbstractMesh) -> Any\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.nodeset_names-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.nodeset_names","text":"nodeset_names(\n    _::FiniteElementContainers.AbstractMesh\n) -> Any\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.nodesets-Tuple{FiniteElementContainers.AbstractMesh, Any}","page":"Meshes","title":"FiniteElementContainers.nodesets","text":"nodesets(\n    _::FiniteElementContainers.AbstractMesh,\n    ids\n) -> Any\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.num_dimensions-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.num_dimensions","text":"num_dimensions(\n    _::FiniteElementContainers.AbstractMesh\n) -> Int32\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.num_nodes-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.num_nodes","text":"num_nodes(_::FiniteElementContainers.AbstractMesh) -> Int32\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.sideset-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.sideset","text":"sideset(_::FiniteElementContainers.AbstractMesh)\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.sideset_ids-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.sideset_ids","text":"sideset_ids(_::FiniteElementContainers.AbstractMesh) -> Any\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.sideset_names-Tuple{FiniteElementContainers.AbstractMesh}","page":"Meshes","title":"FiniteElementContainers.sideset_names","text":"sideset_names(\n    _::FiniteElementContainers.AbstractMesh\n) -> Any\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"meshes/#FiniteElementContainers.sidesets-Tuple{FiniteElementContainers.AbstractMesh, Any}","page":"Meshes","title":"FiniteElementContainers.sidesets","text":"sidesets(\n    _::FiniteElementContainers.AbstractMesh,\n    ids\n) -> Any\n\n\nDummy method to be overriden for specific mesh file format\n\n\n\n\n\n","category":"method"},{"location":"assemblers/","page":"Assemblers","title":"Assemblers","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"assemblers/#Assemblers","page":"Assemblers","title":"Assemblers","text":"","category":"section"},{"location":"assemblers/","page":"Assemblers","title":"Assemblers","text":"Modules = [FiniteElementContainers]\nPages = [\"Assemblers.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"assemblers/#FiniteElementContainers._assemble_element!-Union{Tuple{T}, Tuple{T, Vararg{Any, 4}}} where T<:(AbstractVector{<:Number})","page":"Assemblers","title":"FiniteElementContainers._assemble_element!","text":"_assemble_element!(\n    global_val::AbstractVector{<:Number},\n    local_val,\n    conn,\n    e,\n    b\n)\n\n\nAssembly method for a scalar field stored as a size 1 vector\n\n\n\n\n\n","category":"method"},{"location":"assemblers/#FiniteElementContainers.assemble!-Tuple{Any, Any, H1Field, Symbol}","page":"Assemblers","title":"FiniteElementContainers.assemble!","text":"assemble!(assembler, physics, U::H1Field, sym::Symbol)\n\n\nTop level assembly method TODO make more general\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"CurrentModule = FiniteElementContainers\nDocTestFilters = [\n    r\"{([a-zA-Z0-9]+,\\s?)+[a-zA-Z0-9]+}\",\n    r\"(Array{[a-zA-Z0-9]+,\\s?1}|Vector{[a-zA-Z0-9]+})\",\n    r\"(Array{[a-zA-Z0-9]+,\\s?2}|Matrix{[a-zA-Z0-9]+})\",\n]","category":"page"},{"location":"dof_manager/#DofManager","page":"DofManager","title":"DofManager","text":"","category":"section"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"The DofManager is a struct that keeps track of which dofs are unknown or constrained. This can work with simple or mixed finite element spaces of various types. It is a glorified book keeper.","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"A DofManager can be created as follows. First we must create functions for our variables of interest from their associated function spaces.","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"using Exodus, FiniteElementContainers\nmesh = UnstructuredMesh(\"../../test/poisson/poisson.g\")\nV = FunctionSpace(mesh, H1Field, Lagrange)\nu = VectorFunction(V, :u)\nt = ScalarFunction(V, :t)","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"Now we can supply these variables to the DofManager which takes varargs as inputs","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"dof = DofManager(u, t)","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"The print methods for this struct show simple metadata about the current dofs for each possible function space.","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"A set of unknowns can be set up as follows","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"field = create_unknowns(dof)","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"We can create fields of the right size from the DofManager with the following methods","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"field = create_field(dof, H1Field)","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"These methods take the backed of dof into account to ensure that the fields or unknowns produced are on the same device, e.g. CPU/GPU if dof is on the CPU/GPU.","category":"page"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"This struct is created with all dofs initially set as unknown. To modify the unknowns we can do the following","category":"page"},{"location":"dof_manager/#API","page":"DofManager","title":"API","text":"","category":"section"},{"location":"dof_manager/","page":"DofManager","title":"DofManager","text":"Modules = [FiniteElementContainers]\nPages = [\"DofManagers.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"dof_manager/#FiniteElementContainers.DofManager","page":"DofManager","title":"FiniteElementContainers.DofManager","text":"struct DofManager{T, IDs<:AbstractArray{T, 1}, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}\n\nH1_bc_dofs::AbstractVector\nH1_unknown_dofs::AbstractVector\nHcurl_bc_dofs::AbstractVector\nHcurl_unknown_dofs::AbstractVector\nHdiv_bc_dofs::AbstractVector\nHdiv_unknown_dofs::AbstractVector\nL2_element_dofs::AbstractVector\nL2_quadrature_dofs::AbstractVector\nH1_vars::Any\nHcurl_vars::Any\nHdiv_vars::Any\nL2_element_vars::Any\nL2_quadrature_vars::Any\n\n\n\n\n\n","category":"type"},{"location":"dof_manager/#FiniteElementContainers.DofManager-Tuple","page":"DofManager","title":"FiniteElementContainers.DofManager","text":"DofManager(\n    vars...\n) -> DofManager{T, _B, _C, 0, 0, _D, _E, NamedTuple{_A, var\"#s178\"}, @NamedTuple{}, @NamedTuple{}, NamedTuple{_A1, var\"#s1781\"}, NamedTuple{_A2, var\"#s1782\"}} where {T, _B<:AbstractVector{T}, _C, _D, _E, _A, var\"#s178\"<:Tuple, _A1, var\"#s1781\"<:Tuple, _A2, var\"#s1782\"<:Tuple}\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#Base.eltype-Union{Tuple{DofManager{T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}}, Tuple{L2QVars}, Tuple{L2EVars}, Tuple{HdivVars}, Tuple{HcurlVars}, Tuple{H1Vars}, Tuple{NL2QDofs}, Tuple{NL2EDofs}, Tuple{NHdivDofs}, Tuple{NHcurlDofs}, Tuple{NH1Dofs}, Tuple{IDs}, Tuple{T}} where {T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}","page":"DofManager","title":"Base.eltype","text":"eltype(\n    _::DofManager{T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#Base.length-Tuple{DofManager}","page":"DofManager","title":"Base.length","text":"length(dof::DofManager) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.create_bcs-Tuple{DofManager, Type{H1Field}}","page":"DofManager","title":"FiniteElementContainers.create_bcs","text":"create_bcs(dof::DofManager, _::Type{H1Field}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.create_field-Tuple{DofManager, Type{H1Field}}","page":"DofManager","title":"FiniteElementContainers.create_field","text":"create_field(\n    dof::DofManager,\n    _::Type{H1Field}\n) -> H1Field{Float64, _A, Vector{Float64}} where _A\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.create_unknowns-Tuple{DofManager}","page":"DofManager","title":"FiniteElementContainers.create_unknowns","text":"create_unknowns(dof::DofManager) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.num_dofs_per_edge-Union{Tuple{DofManager{T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}}, Tuple{L2QVars}, Tuple{L2EVars}, Tuple{HdivVars}, Tuple{HcurlVars}, Tuple{H1Vars}, Tuple{NL2QDofs}, Tuple{NL2EDofs}, Tuple{NHdivDofs}, Tuple{NHcurlDofs}, Tuple{NH1Dofs}, Tuple{IDs}, Tuple{T}} where {T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}","page":"DofManager","title":"FiniteElementContainers.num_dofs_per_edge","text":"num_dofs_per_edge(\n    _::DofManager{T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.num_dofs_per_face-Union{Tuple{DofManager{T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}}, Tuple{L2QVars}, Tuple{L2EVars}, Tuple{HdivVars}, Tuple{HcurlVars}, Tuple{H1Vars}, Tuple{NL2QDofs}, Tuple{NL2EDofs}, Tuple{NHdivDofs}, Tuple{NHcurlDofs}, Tuple{NH1Dofs}, Tuple{IDs}, Tuple{T}} where {T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}","page":"DofManager","title":"FiniteElementContainers.num_dofs_per_face","text":"num_dofs_per_face(\n    _::DofManager{T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.num_dofs_per_node-Union{Tuple{DofManager{T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}}, Tuple{L2QVars}, Tuple{L2EVars}, Tuple{HdivVars}, Tuple{HcurlVars}, Tuple{H1Vars}, Tuple{NL2QDofs}, Tuple{NL2EDofs}, Tuple{NHdivDofs}, Tuple{NHcurlDofs}, Tuple{NH1Dofs}, Tuple{IDs}, Tuple{T}} where {T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}","page":"DofManager","title":"FiniteElementContainers.num_dofs_per_node","text":"num_dofs_per_node(\n    _::DofManager{T, IDs, NH1Dofs, NHcurlDofs, NHdivDofs, NL2EDofs, NL2QDofs, H1Vars, HcurlVars, HdivVars, L2EVars, L2QVars}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.num_edges-Tuple{DofManager}","page":"DofManager","title":"FiniteElementContainers.num_edges","text":"num_edges(dof::DofManager) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.num_faces-Tuple{DofManager}","page":"DofManager","title":"FiniteElementContainers.num_faces","text":"num_faces(dof::DofManager) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.num_unknowns-Tuple{DofManager}","page":"DofManager","title":"FiniteElementContainers.num_unknowns","text":"num_unknowns(dof::DofManager) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.update_dofs!-Union{Tuple{T}, Tuple{DofManager, T}} where T<:(AbstractVector{<:Integer})","page":"DofManager","title":"FiniteElementContainers.update_dofs!","text":"update_dofs!(\n    dof::DofManager,\n    dirichlet_dofs::AbstractVector{<:Integer}\n)\n\n\nCurrently not GPU compatable.\n\nThis is only an issue if dofs that correspond to Dirichlet BCs will change often. Otherwise, setup can be achieved on the CPU and transferred to the GPU.\n\nTODO this method need to look at the dirichlet dofs to see what type of variable is there. That way the  appropriate function space book keepers can be updated. Currently this only works with H1 spaces.\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.update_field!-Union{Tuple{T}, Tuple{H1Field, DofManager, T, T}} where T<:(AbstractVector{<:Number})","page":"DofManager","title":"FiniteElementContainers.update_field!","text":"update_field!(\n    U::H1Field,\n    dof::DofManager,\n    Uu::AbstractVector{<:Number},\n    Ubc::AbstractVector{<:Number}\n)\n\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.update_field_bcs!-Union{Tuple{T}, Tuple{H1Field, DofManager, T}} where T<:(AbstractVector{<:Number})","page":"DofManager","title":"FiniteElementContainers.update_field_bcs!","text":"update_field_bcs!(\n    U::H1Field,\n    dof::DofManager,\n    Ubc::AbstractVector{<:Number}\n)\n\n\nDoes a simple copy on CPUs. On GPUs it uses a KernelAbstractions kernel\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.update_field_unknowns!-Union{Tuple{T}, Tuple{H1Field, DofManager, T, typeof(+)}} where T<:(AbstractVector{<:Number})","page":"DofManager","title":"FiniteElementContainers.update_field_unknowns!","text":"update_field_unknowns!(\n    U::H1Field,\n    dof::DofManager,\n    Uu::AbstractVector{<:Number},\n    _::typeof(+)\n)\n\n\nDoes a simple addition on CPUs. On GPUs it uses a KernelAbstractions kernel\n\n\n\n\n\n","category":"method"},{"location":"dof_manager/#FiniteElementContainers.update_field_unknowns!-Union{Tuple{T}, Tuple{H1Field, DofManager, T}} where T<:(AbstractVector{<:Number})","page":"DofManager","title":"FiniteElementContainers.update_field_unknowns!","text":"update_field_unknowns!(\n    U::H1Field,\n    dof::DofManager,\n    Uu::AbstractVector{<:Number}\n)\n\n\nDoes a simple copy on CPUs. On GPUs it uses a KernelAbstractions kernel\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"#FiniteElementContainers","page":"Home","title":"FiniteElementContainers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A set of containers to help in the setup of FEM codes.","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"CurrentModule = FiniteElementContainers","category":"page"},{"location":"fields/#Fields","page":"Fields","title":"Fields","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"Fields serve as loose wrappers around AbstractArray subtypes such that the size of array slices are known at compile time. Although this introduces a type-instability, the idea is to do this at the top most level (mainly at setup time of a FEM simulation). By introducing this type instability, we can gain information about the field type that is used in methods downstream to construct StaticArrays of views of field types.","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"All fields are subtypes of the abstract type AbstractField","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"using FiniteElementContainers\nAbstractField","category":"page"},{"location":"fields/#Example-H1Field-a.k.a.-NodalField","page":"Fields","title":"Example - H1Field a.k.a. NodalField","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"We can set up a H1Field in one of two ways. The simplest constructor form can be used as follows","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"using FiniteElementContainers\nfield = H1Field(rand(2, 10), (:field_1, :field_2))","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"This is stored in a vectorized way as can be seen above","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"field.vals","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"Fields can be indexed like regular arrays, e.g.","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"field[1, 1]","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"field[1, :]","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"etc.","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"But they can also be indexed by the symbols provided during construction","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"field[:field_1]","category":"page"},{"location":"fields/#Abstract-type","page":"Fields","title":"Abstract type","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"The base type for fields is the AbstractField abstract type. ","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"Modules = [FiniteElementContainers]\nPages = [\"fields/Fields.jl\"]\nOrder = [:type]","category":"page"},{"location":"fields/#FiniteElementContainers.AbstractField","page":"Fields","title":"FiniteElementContainers.AbstractField","text":"abstract type AbstractField{T, N, NF, Vals, SymIDMap} <: AbstractArray{T, N}\n\nThin wrapper that subtypes AbstractArray and serves as the base Field type\n\n\n\n\n\n","category":"type"},{"location":"fields/","page":"Fields","title":"Fields","text":"Any new field added to FiniteElementContainers should be a subtype of this type.","category":"page"},{"location":"fields/#Methods-for-AbstractField","page":"Fields","title":"Methods for AbstractField","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"Modules = [FiniteElementContainers]\nPages = [\"fields/Fields.jl\"]\nOrder = [:function]","category":"page"},{"location":"fields/#Base.eltype-Union{Tuple{Type{FiniteElementContainers.AbstractField{T, N, NF, Vals, SymIDMap}}}, Tuple{SymIDMap}, Tuple{Vals}, Tuple{NF}, Tuple{N}, Tuple{T}} where {T, N, NF, Vals, SymIDMap}","page":"Fields","title":"Base.eltype","text":"eltype(\n    _::Type{FiniteElementContainers.AbstractField{T, N, NF, Vals, SymIDMap}}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#Base.names-Union{Tuple{FiniteElementContainers.AbstractField{T, N, NF, Vals, SymIDMap}}, Tuple{SymIDMap}, Tuple{Vals}, Tuple{NF}, Tuple{N}, Tuple{T}} where {T, N, NF, Vals, SymIDMap}","page":"Fields","title":"Base.names","text":"names(\n    _::FiniteElementContainers.AbstractField{T, N, NF, Vals, SymIDMap}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers._sym_id_map-Union{Tuple{SymIDMap}, Tuple{Vals}, Tuple{NF}, Tuple{N}, Tuple{T}, Tuple{FiniteElementContainers.AbstractField{T, N, NF, Vals, SymIDMap}, Symbol}} where {T, N, NF, Vals, SymIDMap}","page":"Fields","title":"FiniteElementContainers._sym_id_map","text":"_sym_id_map(\n    _::FiniteElementContainers.AbstractField{T, N, NF, Vals, SymIDMap},\n    sym::Symbol\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.num_fields-Union{Tuple{FiniteElementContainers.AbstractField{T, N, NF, Vals, SymIDMap}}, Tuple{SymIDMap}, Tuple{Vals}, Tuple{NF}, Tuple{N}, Tuple{T}} where {T, N, NF, Vals, SymIDMap}","page":"Fields","title":"FiniteElementContainers.num_fields","text":"num_fields(\n    _::FiniteElementContainers.AbstractField{T, N, NF, Vals, SymIDMap}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#KernelAbstractions.get_backend-Tuple{FiniteElementContainers.AbstractField}","page":"Fields","title":"KernelAbstractions.get_backend","text":"get_backend(\n    field::FiniteElementContainers.AbstractField\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#Implementations","page":"Fields","title":"Implementations","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"The existing direct subtypes of AbstractField are the following","category":"page"},{"location":"fields/#Connectivity","page":"Fields","title":"Connectivity","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"The connectivity type is a simple alias for L2ElementField defined below","category":"page"},{"location":"fields/","page":"Fields","title":"Fields","text":"Modules = [FiniteElementContainers]\nPages = [\"fields/Connectivity.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"fields/#FiniteElementContainers.Connectivity","page":"Fields","title":"FiniteElementContainers.Connectivity","text":"struct L2ElementField{T, NN, Vals, SymIDMap} <: FiniteElementContainers.AbstractField{T, 2, NN, Vals, SymIDMap}\n\n\n\n\n\n","category":"type"},{"location":"fields/#FiniteElementContainers.Connectivity-Union{Tuple{Any}, Tuple{Tup}} where Tup","page":"Fields","title":"FiniteElementContainers.Connectivity","text":"\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.connectivity-Tuple{Connectivity, Int64}","page":"Fields","title":"FiniteElementContainers.connectivity","text":"connectivity(\n    conn::Connectivity,\n    e::Int64\n) -> SubArray{T, 1} where T\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.connectivity-Tuple{Connectivity}","page":"Fields","title":"FiniteElementContainers.connectivity","text":"connectivity(conn::Connectivity) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#H1-field","page":"Fields","title":"H1 field","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"Modules = [FiniteElementContainers]\nPages = [\"fields/H1Field.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"fields/#FiniteElementContainers.H1Field","page":"Fields","title":"FiniteElementContainers.H1Field","text":"struct H1Field{T, NF, Vals<:AbstractArray{T, 1}, SymIDMap} <: FiniteElementContainers.AbstractField{T, 2, NF, Vals<:AbstractArray{T, 1}, SymIDMap}\n\nImplementation of fields that live on nodes.\n\n\n\n\n\n","category":"type"},{"location":"fields/#FiniteElementContainers.H1Field-Union{Tuple{M}, Tuple{NN}, Tuple{NF}, Tuple{M, Any}} where {NF, NN, M<:(AbstractMatrix{<:Number})}","page":"Fields","title":"FiniteElementContainers.H1Field","text":"H1Field{NF, NN}(vals::M) where {NF, NN, M <: AbstractArray{<:Number, 2}}\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.H1Field-Union{Tuple{Tup}, Tuple{Any, Any}} where Tup","page":"Fields","title":"FiniteElementContainers.H1Field","text":"\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.H1Field-Union{Tuple{V}, Tuple{NN}, Tuple{NF}, Tuple{V, Any}} where {NF, NN, V<:(AbstractVector{<:Number})}","page":"Fields","title":"FiniteElementContainers.H1Field","text":"H1Field{NF, NN}(vals::V) where {NF, NN, V <: AbstractArray{<:Number, 1}}\n\n\n\n\n\n","category":"method"},{"location":"fields/#Base.similar-Union{Tuple{H1Field{T, NF, Vals, SymIDMap}}, Tuple{SymIDMap}, Tuple{Vals}, Tuple{NF}, Tuple{T}} where {T, NF, Vals, SymIDMap}","page":"Fields","title":"Base.similar","text":"similar(field::H1Field{T, NF, Vals, SymIDMap}) -> H1Field\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.num_nodes-Union{Tuple{H1Field{T, NF, Vals, SymIDMap}}, Tuple{SymIDMap}, Tuple{Vals}, Tuple{NF}, Tuple{T}} where {T, NF, Vals, SymIDMap}","page":"Fields","title":"FiniteElementContainers.num_nodes","text":"num_nodes(field::H1Field{T, NF, Vals, SymIDMap}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#L2Element-field","page":"Fields","title":"L2Element field","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"Modules = [FiniteElementContainers]\nPages = [\"fields/L2ElementField.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"fields/#FiniteElementContainers.L2ElementField","page":"Fields","title":"FiniteElementContainers.L2ElementField","text":"struct L2ElementField{T, NN, Vals<:AbstractArray{T, 1}, SymIDMap} <: FiniteElementContainers.AbstractField{T, 2, NN, Vals<:AbstractArray{T, 1}, SymIDMap}\n\nImplementation of fields that live on elements.\n\n\n\n\n\n","category":"type"},{"location":"fields/#FiniteElementContainers.L2ElementField-Union{Tuple{M}, Tuple{NE}, Tuple{NN}, Tuple{M, Any}} where {NN, NE, M<:(AbstractMatrix{<:Number})}","page":"Fields","title":"FiniteElementContainers.L2ElementField","text":"\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.L2ElementField-Union{Tuple{Tup}, Tuple{Any, Any}} where Tup","page":"Fields","title":"FiniteElementContainers.L2ElementField","text":"\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.L2ElementField-Union{Tuple{V}, Tuple{NN}, Tuple{NF}, Tuple{V, Any}} where {NF, NN, V<:(AbstractVector{<:Number})}","page":"Fields","title":"FiniteElementContainers.L2ElementField","text":"\n\n\n\n","category":"method"},{"location":"fields/#Base.similar-Union{Tuple{Connectivity{T, NN, Vals, SymIDMap}}, Tuple{SymIDMap}, Tuple{Vals}, Tuple{NN}, Tuple{T}} where {T, NN, Vals, SymIDMap}","page":"Fields","title":"Base.similar","text":"similar(\n    field::L2ElementField{T, NN, Vals, SymIDMap}\n) -> L2ElementField\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.num_elements-Union{Tuple{Connectivity{T, NN, Vals, SymIDMap}}, Tuple{SymIDMap}, Tuple{Vals}, Tuple{NN}, Tuple{T}} where {T, NN, Vals, SymIDMap}","page":"Fields","title":"FiniteElementContainers.num_elements","text":"num_elements(\n    field::L2ElementField{T, NN, Vals, SymIDMap}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#FiniteElementContainers.num_nodes_per_element-Tuple{L2ElementField}","page":"Fields","title":"FiniteElementContainers.num_nodes_per_element","text":"num_nodes_per_element(field::L2ElementField) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"fields/#L2Quadrature-field","page":"Fields","title":"L2Quadrature field","text":"","category":"section"},{"location":"fields/","page":"Fields","title":"Fields","text":"Modules = [FiniteElementContainers]\nPages = [\"fields/L2QuadratureField.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"fields/#FiniteElementContainers.L2QuadratureField","page":"Fields","title":"FiniteElementContainers.L2QuadratureField","text":"struct L2QuadratureField{T, NF, NQ, Vals<:AbstractArray{T, 1}, SymIDMap} <: FiniteElementContainers.AbstractField{T, 3, NF, Vals<:AbstractArray{T, 1}, SymIDMap}\n\nImplementation of fields that live on elements.\n\n\n\n\n\n","category":"type"},{"location":"fields/","page":"Fields","title":"Fields","text":"There are plans to add HcurlField and HdivField types as well","category":"page"},{"location":"function_spaces/#FunctionSpace","page":"Function spaces","title":"FunctionSpace","text":"","category":"section"},{"location":"function_spaces/","page":"Function spaces","title":"Function spaces","text":"using Exodus, FiniteElementContainers\nmesh = UnstructuredMesh(\"../../test/poisson/poisson.g\")\nV = FunctionSpace(mesh, H1Field, Lagrange)","category":"page"},{"location":"function_spaces/#API","page":"Function spaces","title":"API","text":"","category":"section"},{"location":"function_spaces/","page":"Function spaces","title":"Function spaces","text":"Modules = [FiniteElementContainers]\nPages = [\"FunctionSpaces.jl\"]\nOrder = [:type, :function]","category":"page"},{"location":"function_spaces/#FiniteElementContainers.AbstractFunctionSpace","page":"Function spaces","title":"FiniteElementContainers.AbstractFunctionSpace","text":"abstract type AbstractFunctionSpace\n\n\n\n\n\n","category":"type"},{"location":"function_spaces/#FiniteElementContainers.FunctionSpace","page":"Function spaces","title":"FiniteElementContainers.FunctionSpace","text":"struct FunctionSpace{Coords<:FiniteElementContainers.AbstractField, ElemConns, ElemIdMaps, RefFEs, SSetElems, SSetNodes, SSetSides} <: FiniteElementContainers.AbstractFunctionSpace\n\ncoords::FiniteElementContainers.AbstractField\nelem_conns::Any\nelem_id_maps::Any\nref_fes::Any\nsideset_elems::Any\nsideset_nodes::Any\nsideset_sides::Any\n\n\n\n\n\n","category":"type"}]
}
